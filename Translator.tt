<#@ template hostSpecific="true"#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="System.Data.Common" #>
<#@ output extension="/" #>
<#@include file="Manager.ttinclude"#>

<#
string path="D:/VS Workspace/Shomoos/Common/Registration.DAL";
var manager = Manager.Create(Host, GenerationEnvironment);
string  fileName =null;
string[] lines;
List<string>properties=new List<string>();
string [] test=null;

var hostServiceProvider = (IServiceProvider)Host;
var dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
var activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
var dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
string defaultNamespace = dteProject.Properties.Item("DefaultNamespace").Value.ToString();
string [] rootNameSpace=defaultNamespace.Split('.');

#>


<#
	//you have to change this path to your EF path 
foreach(string dirFile in Directory.GetFiles(path))
{
	fileName=Path.GetFileNameWithoutExtension(dirFile);
	if(dirFile.Contains(rootNameSpace[0]+"Model")||fileName.StartsWith("vw_")||fileName.EndsWith(".DAL")||dirFile.EndsWith(".config")||dirFile.Contains("Metadata")||dirFile.Contains("diagram")||dirFile.Contains(".Designer")||dirFile.EndsWith("tt")||dirFile.EndsWith("diagram")||dirFile.Contains(".Context")||dirFile.Contains("DBModel")||dirFile.Contains("edmx")||dirFile.Contains("Context")){
	continue;
	}

	manager.StartNewFile("Translator"+fileName+".cs");
	lines = File.ReadAllLines(dirFile);
	#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using <#=rootNameSpace[0]#>.DAL;
using <#=rootNameSpace[0]#>.DataContract;
namespace <#=defaultNamespace#>
{
public class TranslatorOf<#=fileName#> : ITranslatorOf<#=fileName#>{
public <#=fileName#> TranslateDCTo<#=fileName#>(<#=fileName#>DC <#=FixNameToLower(fileName)#>DC){
return new <#=fileName#> 
{
 <#foreach(string line in lines ){

   if(!(line.Contains("namespace")||line.Contains("partial class")||line.Contains("/")||line.Contains("using")||line.Contains("[DataContract]")||line.Contains("[DataMember]")||line.Contains("public virtual")||line.Contains("[System.Diagnostics.CodeAnalysis"))){
	   foreach(string s in line.Split(' ')){
		  if(!(s.Contains("public")||s.Contains("long")||s.Contains("string")||s.Contains("static")||s.Contains("get;")||s.Contains("set;")||s.Contains("{")||s.Contains("}")||s.Contains("bool")||s.Contains("DateTime")||s.Contains("return")||s.Contains("new")||s.Contains("virtual")||s.Contains(".")||s.Contains("DataContract")||s.Contains("Nullable")||s.Contains("()")||s.Contains("toTranslate)"))){
		 if(s.StartsWith("A")||s.StartsWith("B")||s.StartsWith("C")||s.StartsWith("D")||s.StartsWith("E")||s.StartsWith("F")||s.StartsWith("G")||s.StartsWith("H")||s.StartsWith("I")||s.StartsWith("J")||s.StartsWith("K")||s.StartsWith("L")||s.StartsWith("M")||s.StartsWith("N")||s.StartsWith("O")||s.StartsWith("P")||s.StartsWith("Q")||s.StartsWith("R")||s.StartsWith("S")||s.StartsWith("T")||s.StartsWith("U")||s.StartsWith("V")||s.StartsWith("W")||s.StartsWith("X")||s.StartsWith("Y")||s.StartsWith("Z")){#>
 <#=s#>=<#=FixNameToLower(fileName)#>DC.<#=s#>,
   <#}}}
   }}#>
  
   
   };
}

 public <#=fileName#>DC Translate<#=fileName#>ToDC(<#=fileName#> entity)
{
return new <#=fileName#>DC
{
<#foreach(string line in lines ){

   if(!(line.Contains("namespace")||line.Contains("partial class")||line.Contains("/")||line.Contains("using")||line.Contains("[DataContract]")||line.Contains("[DataMember]")||line.Contains("public virtual")||line.Contains("[System.Diagnostics.CodeAnalysis"))){
	   foreach(string s in line.Split(' ')){
		  if(!(s.Contains("public")||s.Contains("long")||s.Contains("string")||s.Contains("static")||s.Contains("get;")||s.Contains("set;")||s.Contains("{")||s.Contains("}")||s.Contains("bool")||s.Contains("DateTime")||s.Contains("return")||s.Contains("new")||s.Contains("virtual")||s.Contains(".")||s.Contains("DataContract")||s.Contains("Nullable")||s.Contains("()")||s.Contains("toTranslate)"))){
		 if(s.StartsWith("A")||s.StartsWith("B")||s.StartsWith("C")||s.StartsWith("D")||s.StartsWith("E")||s.StartsWith("F")||s.StartsWith("G")||s.StartsWith("H")||s.StartsWith("I")||s.StartsWith("J")||s.StartsWith("K")||s.StartsWith("L")||s.StartsWith("M")||s.StartsWith("N")||s.StartsWith("O")||s.StartsWith("P")||s.StartsWith("Q")||s.StartsWith("R")||s.StartsWith("S")||s.StartsWith("T")||s.StartsWith("U")||s.StartsWith("V")||s.StartsWith("W")||s.StartsWith("X")||s.StartsWith("Y")||s.StartsWith("Z")){#>
 <#=s#>=entity.<#=s#>,
   <#}}}
   }}#>
};

}

public IEnumerable<<#=fileName#>> TranslateDCsToList<#=fileName#>(IEnumerable<<#=fileName#>DC> <#=fileName#>DCs)
{
List<<#=fileName#>> toReturn = new List<<#=fileName#>>();
foreach(<#=fileName#>DC dc in <#=fileName#>DCs)
{
toReturn.Add(new <#=fileName#>{
<#foreach(string line in lines ){

   if(!(line.Contains("namespace")||line.Contains("partial class")||line.Contains("/")||line.Contains("using")||line.Contains("[DataContract]")||line.Contains("[DataMember]")||line.Contains("public virtual")||line.Contains("[System.Diagnostics.CodeAnalysis"))){
	   foreach(string s in line.Split(' ')){
		  if(!(s.Contains("public")||s.Contains("long")||s.Contains("string")||s.Contains("static")||s.Contains("get;")||s.Contains("set;")||s.Contains("{")||s.Contains("}")||s.Contains("bool")||s.Contains("DateTime")||s.Contains("return")||s.Contains("new")||s.Contains("virtual")||s.Contains(".")||s.Contains("DataContract")||s.Contains("Nullable")||s.Contains("()")||s.Contains("toTranslate)"))){
		 if(s.StartsWith("A")||s.StartsWith("B")||s.StartsWith("C")||s.StartsWith("D")||s.StartsWith("E")||s.StartsWith("F")||s.StartsWith("G")||s.StartsWith("H")||s.StartsWith("I")||s.StartsWith("J")||s.StartsWith("K")||s.StartsWith("L")||s.StartsWith("M")||s.StartsWith("N")||s.StartsWith("O")||s.StartsWith("P")||s.StartsWith("Q")||s.StartsWith("R")||s.StartsWith("S")||s.StartsWith("T")||s.StartsWith("U")||s.StartsWith("V")||s.StartsWith("W")||s.StartsWith("X")||s.StartsWith("Y")||s.StartsWith("Z")){#>
 <#=s#>=dc.<#=s#>,
   <#}}}
   }}#>});
}
   return toReturn;
}
public IEnumerable<<#=fileName#>DC> TranslateList<#=fileName#>ToDCs(IEnumerable<<#=fileName#>> entities)
{
List<<#=fileName#>DC> toReturn = new List<<#=fileName#>DC>();
foreach(<#=fileName#> entity in entities)
{
toReturn.Add(new <#=fileName#>DC{
<#foreach(string line in lines ){

   if(!(line.Contains("namespace")||line.Contains("partial class")||line.Contains("/")||line.Contains("using")||line.Contains("[DataContract]")||line.Contains("[DataMember]")||line.Contains("public virtual")||line.Contains("[System.Diagnostics.CodeAnalysis"))){
	   foreach(string s in line.Split(' ')){
		  if(!(s.Contains("public")||s.Contains("long")||s.Contains("string")||s.Contains("static")||s.Contains("get;")||s.Contains("set;")||s.Contains("{")||s.Contains("}")||s.Contains("bool")||s.Contains("DateTime")||s.Contains("return")||s.Contains("new")||s.Contains("virtual")||s.Contains(".")||s.Contains("DataContract")||s.Contains("Nullable")||s.Contains("()")||s.Contains("toTranslate)"))){
		 if(s.StartsWith("A")||s.StartsWith("B")||s.StartsWith("C")||s.StartsWith("D")||s.StartsWith("E")||s.StartsWith("F")||s.StartsWith("G")||s.StartsWith("H")||s.StartsWith("I")||s.StartsWith("J")||s.StartsWith("K")||s.StartsWith("L")||s.StartsWith("M")||s.StartsWith("N")||s.StartsWith("O")||s.StartsWith("P")||s.StartsWith("Q")||s.StartsWith("R")||s.StartsWith("S")||s.StartsWith("T")||s.StartsWith("U")||s.StartsWith("V")||s.StartsWith("W")||s.StartsWith("X")||s.StartsWith("Y")||s.StartsWith("Z")){#>
 <#=s#>=entity.<#=s#>,
   <#}}}
   }}#>});
}
   return toReturn;
}


}
}
<#
}
manager.Process(true);#>

<#+

private string FixNameToLower(string name)
{
	       var result =name.Replace(" ","");
	        if (result.Substring(result.Length - 3, 3) == "ies")
            {
                result = result.Substring(0, result.Length - 3)+"y";
            }

            else if (result.Substring(result.Length - 1, 1) == "s")
            {
                result = result.Substring(0, result.Length - 1);
            }

	
	return result.First().ToString().ToLower() + result.Substring(1);
}

#>