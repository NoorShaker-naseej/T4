<#@ template hostSpecific="true"#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="System.Data.Common" #>
<#@ output extension="/" #>
<#@include file="Manager.ttinclude"#>

<#
string path="C:/Users/NShaker/Source/Repos/Common/Registration.DAL";
var manager = Manager.Create(Host, GenerationEnvironment);
string  fileName =null;
string[] lines;
List<string>properties=new List<string>();
string [] test=null;

var hostServiceProvider = (IServiceProvider)Host;
var dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
var activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
var dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
string defaultNamespace = dteProject.Properties.Item("DefaultNamespace").Value.ToString();
string [] rootNameSpace=defaultNamespace.Split('.');

#>

<#
	//you have to change this path to your EF path 
foreach(string dirFile in Directory.GetFiles(path))
{
	fileName=Path.GetFileNameWithoutExtension(dirFile);
	if(dirFile.Contains(rootNameSpace[0]+"Model")||fileName.StartsWith("vw_")||fileName.EndsWith(".DAL")||dirFile.EndsWith(".config")||dirFile.Contains("Metadata")||dirFile.Contains("diagram")||dirFile.Contains(".Designer")||dirFile.EndsWith("tt")||dirFile.EndsWith("diagram")||dirFile.Contains(".Context")||dirFile.Contains("DBModel")||dirFile.Contains("Shomoos")||dirFile.Contains("edmx")||dirFile.Contains("Context")){
	continue;
	}

	manager.StartNewFile("ITranslator"+fileName+".cs");
	//lines = File.ReadAllLines(dirFile);
	#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using <#=rootNameSpace[0]#>.DAL;
using <#=rootNameSpace[0]#>.DataContract;
namespace <#=defaultNamespace#>
{
 interface ITranslatorOf<#=fileName#>{
<#=fileName#> TranslateDCTo<#=fileName#>(<#=fileName#>DC <#=FixNameToLower(fileName)#>DC);
<#=fileName#>DC Translate<#=fileName#>ToDC(<#=fileName#> entity);
IEnumerable<<#=fileName#>> TranslateDCsTo<#=fileName#>(IEnumerable<<#=fileName#>DC> Dcs);
IEnumerable<<#=fileName#>DC> Translate<#=fileName#>ToDCs(IEnumerable<<#=fileName#>> entities);

}
}
<#}
  
  manager.Process(true);
#>
<#+

private string FixNameToLower(string name)
{
	       var result =name.Replace(" ","");
	        if (result.Substring(result.Length - 3, 3) == "ies")
            {
                result = result.Substring(0, result.Length - 3)+"y";
            }

            else if (result.Substring(result.Length - 1, 1) == "s")
            {
                result = result.Substring(0, result.Length - 1);
            }

	
	return result.First().ToString().ToLower() + result.Substring(1);
}

#>